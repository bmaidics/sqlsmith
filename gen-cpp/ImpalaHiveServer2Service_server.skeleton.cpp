// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ImpalaHiveServer2Service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::impala;

class ImpalaHiveServer2ServiceHandler : virtual public ImpalaHiveServer2ServiceIf {
 public:
  ImpalaHiveServer2ServiceHandler() {
    // Your initialization goes here
  }

  void GetExecSummary(TGetExecSummaryResp& _return, const TGetExecSummaryReq& req) {
    // Your implementation goes here
    printf("GetExecSummary\n");
  }

  void GetRuntimeProfile(TGetRuntimeProfileResp& _return, const TGetRuntimeProfileReq& req) {
    // Your implementation goes here
    printf("GetRuntimeProfile\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ImpalaHiveServer2ServiceHandler> handler(new ImpalaHiveServer2ServiceHandler());
  shared_ptr<TProcessor> processor(new ImpalaHiveServer2ServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

