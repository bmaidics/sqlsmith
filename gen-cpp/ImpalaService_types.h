/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImpalaService_TYPES_H
#define ImpalaService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "ExecStats_types.h"
#include "Status_types.h"
#include "Types_types.h"
#include "beeswax_types.h"
#include "TCLIService_types.h"


namespace impala {

struct TImpalaQueryOptions {
  enum type {
    ABORT_ON_ERROR = 0,
    MAX_ERRORS = 1,
    DISABLE_CODEGEN = 2,
    BATCH_SIZE = 3,
    MEM_LIMIT = 4,
    NUM_NODES = 5,
    MAX_SCAN_RANGE_LENGTH = 6,
    MAX_IO_BUFFERS = 7,
    NUM_SCANNER_THREADS = 8,
    ALLOW_UNSUPPORTED_FORMATS = 9,
    DEFAULT_ORDER_BY_LIMIT = 10,
    DEBUG_ACTION = 11,
    ABORT_ON_DEFAULT_LIMIT_EXCEEDED = 12,
    COMPRESSION_CODEC = 13,
    SEQ_COMPRESSION_MODE = 14,
    HBASE_CACHING = 15,
    HBASE_CACHE_BLOCKS = 16,
    PARQUET_FILE_SIZE = 17,
    EXPLAIN_LEVEL = 18,
    SYNC_DDL = 19,
    REQUEST_POOL = 20,
    V_CPU_CORES = 21,
    RESERVATION_REQUEST_TIMEOUT = 22,
    DISABLE_CACHED_READS = 23,
    DISABLE_OUTERMOST_TOPN = 24,
    RM_INITIAL_MEM = 25,
    QUERY_TIMEOUT_S = 26,
    MAX_BLOCK_MGR_MEMORY = 27,
    APPX_COUNT_DISTINCT = 28,
    DISABLE_UNSAFE_SPILLS = 29,
    EXEC_SINGLE_NODE_ROWS_THRESHOLD = 30,
    OPTIMIZE_PARTITION_KEY_SCANS = 31,
    REPLICA_PREFERENCE = 32,
    RANDOM_REPLICA = 33,
    SCAN_NODE_CODEGEN_THRESHOLD = 34,
    DISABLE_STREAMING_PREAGGREGATIONS = 35,
    RUNTIME_FILTER_MODE = 36,
    RUNTIME_BLOOM_FILTER_SIZE = 37,
    RUNTIME_FILTER_WAIT_TIME_MS = 38,
    DISABLE_ROW_RUNTIME_FILTERING = 39,
    MAX_NUM_RUNTIME_FILTERS = 40
  };
};

extern const std::map<int, const char*> _TImpalaQueryOptions_VALUES_TO_NAMES;

class TInsertResult;

class TPingImpalaServiceResp;

class TResetTableReq;

class TGetExecSummaryReq;

class TGetExecSummaryResp;

class TGetRuntimeProfileReq;

class TGetRuntimeProfileResp;


class TInsertResult {
 public:

  TInsertResult(const TInsertResult&);
  TInsertResult& operator=(const TInsertResult&);
  TInsertResult() {
  }

  virtual ~TInsertResult() throw();
  std::map<std::string, int64_t>  rows_appended;

  void __set_rows_appended(const std::map<std::string, int64_t> & val);

  bool operator == (const TInsertResult & rhs) const
  {
    if (!(rows_appended == rhs.rows_appended))
      return false;
    return true;
  }
  bool operator != (const TInsertResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TInsertResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TInsertResult &a, TInsertResult &b);

inline std::ostream& operator<<(std::ostream& out, const TInsertResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TPingImpalaServiceResp__isset {
  _TPingImpalaServiceResp__isset() : version(false) {}
  bool version :1;
} _TPingImpalaServiceResp__isset;

class TPingImpalaServiceResp {
 public:

  TPingImpalaServiceResp(const TPingImpalaServiceResp&);
  TPingImpalaServiceResp& operator=(const TPingImpalaServiceResp&);
  TPingImpalaServiceResp() : version() {
  }

  virtual ~TPingImpalaServiceResp() throw();
  std::string version;

  _TPingImpalaServiceResp__isset __isset;

  void __set_version(const std::string& val);

  bool operator == (const TPingImpalaServiceResp & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const TPingImpalaServiceResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPingImpalaServiceResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPingImpalaServiceResp &a, TPingImpalaServiceResp &b);

inline std::ostream& operator<<(std::ostream& out, const TPingImpalaServiceResp& obj)
{
  obj.printTo(out);
  return out;
}


class TResetTableReq {
 public:

  TResetTableReq(const TResetTableReq&);
  TResetTableReq& operator=(const TResetTableReq&);
  TResetTableReq() : db_name(), table_name() {
  }

  virtual ~TResetTableReq() throw();
  std::string db_name;
  std::string table_name;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  bool operator == (const TResetTableReq & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const TResetTableReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResetTableReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TResetTableReq &a, TResetTableReq &b);

inline std::ostream& operator<<(std::ostream& out, const TResetTableReq& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TGetExecSummaryReq__isset {
  _TGetExecSummaryReq__isset() : operationHandle(false), sessionHandle(false) {}
  bool operationHandle :1;
  bool sessionHandle :1;
} _TGetExecSummaryReq__isset;

class TGetExecSummaryReq {
 public:

  TGetExecSummaryReq(const TGetExecSummaryReq&);
  TGetExecSummaryReq& operator=(const TGetExecSummaryReq&);
  TGetExecSummaryReq() {
  }

  virtual ~TGetExecSummaryReq() throw();
   ::apache::hive::service::cli::thrift::TOperationHandle operationHandle;
   ::apache::hive::service::cli::thrift::TSessionHandle sessionHandle;

  _TGetExecSummaryReq__isset __isset;

  void __set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val);

  void __set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val);

  bool operator == (const TGetExecSummaryReq & rhs) const
  {
    if (__isset.operationHandle != rhs.__isset.operationHandle)
      return false;
    else if (__isset.operationHandle && !(operationHandle == rhs.operationHandle))
      return false;
    if (__isset.sessionHandle != rhs.__isset.sessionHandle)
      return false;
    else if (__isset.sessionHandle && !(sessionHandle == rhs.sessionHandle))
      return false;
    return true;
  }
  bool operator != (const TGetExecSummaryReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetExecSummaryReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetExecSummaryReq &a, TGetExecSummaryReq &b);

inline std::ostream& operator<<(std::ostream& out, const TGetExecSummaryReq& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TGetExecSummaryResp__isset {
  _TGetExecSummaryResp__isset() : summary(false) {}
  bool summary :1;
} _TGetExecSummaryResp__isset;

class TGetExecSummaryResp {
 public:

  TGetExecSummaryResp(const TGetExecSummaryResp&);
  TGetExecSummaryResp& operator=(const TGetExecSummaryResp&);
  TGetExecSummaryResp() {
  }

  virtual ~TGetExecSummaryResp() throw();
   ::apache::hive::service::cli::thrift::TStatus status;
   ::impala::TExecSummary summary;

  _TGetExecSummaryResp__isset __isset;

  void __set_status(const  ::apache::hive::service::cli::thrift::TStatus& val);

  void __set_summary(const  ::impala::TExecSummary& val);

  bool operator == (const TGetExecSummaryResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.summary != rhs.__isset.summary)
      return false;
    else if (__isset.summary && !(summary == rhs.summary))
      return false;
    return true;
  }
  bool operator != (const TGetExecSummaryResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetExecSummaryResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetExecSummaryResp &a, TGetExecSummaryResp &b);

inline std::ostream& operator<<(std::ostream& out, const TGetExecSummaryResp& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TGetRuntimeProfileReq__isset {
  _TGetRuntimeProfileReq__isset() : operationHandle(false), sessionHandle(false) {}
  bool operationHandle :1;
  bool sessionHandle :1;
} _TGetRuntimeProfileReq__isset;

class TGetRuntimeProfileReq {
 public:

  TGetRuntimeProfileReq(const TGetRuntimeProfileReq&);
  TGetRuntimeProfileReq& operator=(const TGetRuntimeProfileReq&);
  TGetRuntimeProfileReq() {
  }

  virtual ~TGetRuntimeProfileReq() throw();
   ::apache::hive::service::cli::thrift::TOperationHandle operationHandle;
   ::apache::hive::service::cli::thrift::TSessionHandle sessionHandle;

  _TGetRuntimeProfileReq__isset __isset;

  void __set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val);

  void __set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val);

  bool operator == (const TGetRuntimeProfileReq & rhs) const
  {
    if (__isset.operationHandle != rhs.__isset.operationHandle)
      return false;
    else if (__isset.operationHandle && !(operationHandle == rhs.operationHandle))
      return false;
    if (__isset.sessionHandle != rhs.__isset.sessionHandle)
      return false;
    else if (__isset.sessionHandle && !(sessionHandle == rhs.sessionHandle))
      return false;
    return true;
  }
  bool operator != (const TGetRuntimeProfileReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetRuntimeProfileReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetRuntimeProfileReq &a, TGetRuntimeProfileReq &b);

inline std::ostream& operator<<(std::ostream& out, const TGetRuntimeProfileReq& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TGetRuntimeProfileResp__isset {
  _TGetRuntimeProfileResp__isset() : profile(false) {}
  bool profile :1;
} _TGetRuntimeProfileResp__isset;

class TGetRuntimeProfileResp {
 public:

  TGetRuntimeProfileResp(const TGetRuntimeProfileResp&);
  TGetRuntimeProfileResp& operator=(const TGetRuntimeProfileResp&);
  TGetRuntimeProfileResp() : profile() {
  }

  virtual ~TGetRuntimeProfileResp() throw();
   ::apache::hive::service::cli::thrift::TStatus status;
  std::string profile;

  _TGetRuntimeProfileResp__isset __isset;

  void __set_status(const  ::apache::hive::service::cli::thrift::TStatus& val);

  void __set_profile(const std::string& val);

  bool operator == (const TGetRuntimeProfileResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.profile != rhs.__isset.profile)
      return false;
    else if (__isset.profile && !(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const TGetRuntimeProfileResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGetRuntimeProfileResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetRuntimeProfileResp &a, TGetRuntimeProfileResp &b);

inline std::ostream& operator<<(std::ostream& out, const TGetRuntimeProfileResp& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
