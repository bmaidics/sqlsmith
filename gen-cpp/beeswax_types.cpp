/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "beeswax_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace beeswax {

int _kQueryStateValues[] = {
  QueryState::CREATED,
  QueryState::INITIALIZED,
  QueryState::COMPILED,
  QueryState::RUNNING,
  QueryState::FINISHED,
  QueryState::EXCEPTION
};
const char* _kQueryStateNames[] = {
  "CREATED",
  "INITIALIZED",
  "COMPILED",
  "RUNNING",
  "FINISHED",
  "EXCEPTION"
};
const std::map<int, const char*> _QueryState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kQueryStateValues, _kQueryStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Query::~Query() throw() {
}


void Query::__set_query(const std::string& val) {
  this->query = val;
}

void Query::__set_configuration(const std::vector<std::string> & val) {
  this->configuration = val;
}

void Query::__set_hadoop_user(const std::string& val) {
  this->hadoop_user = val;
}

uint32_t Query::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->query);
          this->__isset.query = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->configuration.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->configuration.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->configuration[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.configuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hadoop_user);
          this->__isset.hadoop_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query");

  xfer += oprot->writeFieldBegin("query", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->query);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("configuration", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->configuration.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->configuration.begin(); _iter5 != this->configuration.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hadoop_user", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->hadoop_user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query &a, Query &b) {
  using ::std::swap;
  swap(a.query, b.query);
  swap(a.configuration, b.configuration);
  swap(a.hadoop_user, b.hadoop_user);
  swap(a.__isset, b.__isset);
}

Query::Query(const Query& other6) {
  query = other6.query;
  configuration = other6.configuration;
  hadoop_user = other6.hadoop_user;
  __isset = other6.__isset;
}
Query& Query::operator=(const Query& other7) {
  query = other7.query;
  configuration = other7.configuration;
  hadoop_user = other7.hadoop_user;
  __isset = other7.__isset;
  return *this;
}
void Query::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query(";
  out << "query=" << to_string(query);
  out << ", " << "configuration=" << to_string(configuration);
  out << ", " << "hadoop_user=" << to_string(hadoop_user);
  out << ")";
}


QueryHandle::~QueryHandle() throw() {
}


void QueryHandle::__set_id(const std::string& val) {
  this->id = val;
}

void QueryHandle::__set_log_context(const LogContextId& val) {
  this->log_context = val;
}

uint32_t QueryHandle::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->log_context);
          this->__isset.log_context = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryHandle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryHandle");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("log_context", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->log_context);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryHandle &a, QueryHandle &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.log_context, b.log_context);
  swap(a.__isset, b.__isset);
}

QueryHandle::QueryHandle(const QueryHandle& other8) {
  id = other8.id;
  log_context = other8.log_context;
  __isset = other8.__isset;
}
QueryHandle& QueryHandle::operator=(const QueryHandle& other9) {
  id = other9.id;
  log_context = other9.log_context;
  __isset = other9.__isset;
  return *this;
}
void QueryHandle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryHandle(";
  out << "id=" << to_string(id);
  out << ", " << "log_context=" << to_string(log_context);
  out << ")";
}


QueryExplanation::~QueryExplanation() throw() {
}


void QueryExplanation::__set_textual(const std::string& val) {
  this->textual = val;
}

uint32_t QueryExplanation::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->textual);
          this->__isset.textual = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryExplanation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryExplanation");

  xfer += oprot->writeFieldBegin("textual", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->textual);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryExplanation &a, QueryExplanation &b) {
  using ::std::swap;
  swap(a.textual, b.textual);
  swap(a.__isset, b.__isset);
}

QueryExplanation::QueryExplanation(const QueryExplanation& other10) {
  textual = other10.textual;
  __isset = other10.__isset;
}
QueryExplanation& QueryExplanation::operator=(const QueryExplanation& other11) {
  textual = other11.textual;
  __isset = other11.__isset;
  return *this;
}
void QueryExplanation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryExplanation(";
  out << "textual=" << to_string(textual);
  out << ")";
}


Results::~Results() throw() {
}


void Results::__set_ready(const bool val) {
  this->ready = val;
}

void Results::__set_columns(const std::vector<std::string> & val) {
  this->columns = val;
}

void Results::__set_data(const std::vector<std::string> & val) {
  this->data = val;
}

void Results::__set_start_row(const int64_t val) {
  this->start_row = val;
}

void Results::__set_has_more(const bool val) {
  this->has_more = val;
}

uint32_t Results::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ready);
          this->__isset.ready = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->columns.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->columns.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->columns[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->data.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->data.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += iprot->readString(this->data[_i21]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_row);
          this->__isset.start_row = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_more);
          this->__isset.has_more = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Results::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Results");

  xfer += oprot->writeFieldBegin("ready", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ready);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("columns", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->columns.size()));
    std::vector<std::string> ::const_iterator _iter22;
    for (_iter22 = this->columns.begin(); _iter22 != this->columns.end(); ++_iter22)
    {
      xfer += oprot->writeString((*_iter22));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->data.size()));
    std::vector<std::string> ::const_iterator _iter23;
    for (_iter23 = this->data.begin(); _iter23 != this->data.end(); ++_iter23)
    {
      xfer += oprot->writeString((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_row", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->start_row);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_more", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->has_more);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Results &a, Results &b) {
  using ::std::swap;
  swap(a.ready, b.ready);
  swap(a.columns, b.columns);
  swap(a.data, b.data);
  swap(a.start_row, b.start_row);
  swap(a.has_more, b.has_more);
  swap(a.__isset, b.__isset);
}

Results::Results(const Results& other24) {
  ready = other24.ready;
  columns = other24.columns;
  data = other24.data;
  start_row = other24.start_row;
  has_more = other24.has_more;
  __isset = other24.__isset;
}
Results& Results::operator=(const Results& other25) {
  ready = other25.ready;
  columns = other25.columns;
  data = other25.data;
  start_row = other25.start_row;
  has_more = other25.has_more;
  __isset = other25.__isset;
  return *this;
}
void Results::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Results(";
  out << "ready=" << to_string(ready);
  out << ", " << "columns=" << to_string(columns);
  out << ", " << "data=" << to_string(data);
  out << ", " << "start_row=" << to_string(start_row);
  out << ", " << "has_more=" << to_string(has_more);
  out << ")";
}


ResultsMetadata::~ResultsMetadata() throw() {
}


void ResultsMetadata::__set_schema(const  ::Apache::Hadoop::Hive::Schema& val) {
  this->schema = val;
}

void ResultsMetadata::__set_table_dir(const std::string& val) {
  this->table_dir = val;
}

void ResultsMetadata::__set_in_tablename(const std::string& val) {
  this->in_tablename = val;
}

void ResultsMetadata::__set_delim(const std::string& val) {
  this->delim = val;
}

uint32_t ResultsMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->schema.read(iprot);
          this->__isset.schema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_dir);
          this->__isset.table_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->in_tablename);
          this->__isset.in_tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->delim);
          this->__isset.delim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResultsMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResultsMetadata");

  xfer += oprot->writeFieldBegin("schema", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->schema.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_dir", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("in_tablename", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->in_tablename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delim", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->delim);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResultsMetadata &a, ResultsMetadata &b) {
  using ::std::swap;
  swap(a.schema, b.schema);
  swap(a.table_dir, b.table_dir);
  swap(a.in_tablename, b.in_tablename);
  swap(a.delim, b.delim);
  swap(a.__isset, b.__isset);
}

ResultsMetadata::ResultsMetadata(const ResultsMetadata& other26) {
  schema = other26.schema;
  table_dir = other26.table_dir;
  in_tablename = other26.in_tablename;
  delim = other26.delim;
  __isset = other26.__isset;
}
ResultsMetadata& ResultsMetadata::operator=(const ResultsMetadata& other27) {
  schema = other27.schema;
  table_dir = other27.table_dir;
  in_tablename = other27.in_tablename;
  delim = other27.delim;
  __isset = other27.__isset;
  return *this;
}
void ResultsMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResultsMetadata(";
  out << "schema=" << to_string(schema);
  out << ", " << "table_dir=" << to_string(table_dir);
  out << ", " << "in_tablename=" << to_string(in_tablename);
  out << ", " << "delim=" << to_string(delim);
  out << ")";
}


BeeswaxException::~BeeswaxException() throw() {
}


void BeeswaxException::__set_message(const std::string& val) {
  this->message = val;
}

void BeeswaxException::__set_log_context(const LogContextId& val) {
  this->log_context = val;
}

void BeeswaxException::__set_handle(const QueryHandle& val) {
  this->handle = val;
}

void BeeswaxException::__set_errorCode(const int32_t val) {
  this->errorCode = val;
__isset.errorCode = true;
}

void BeeswaxException::__set_SQLState(const std::string& val) {
  this->SQLState = val;
__isset.SQLState = true;
}

uint32_t BeeswaxException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->log_context);
          this->__isset.log_context = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->handle.read(iprot);
          this->__isset.handle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SQLState);
          this->__isset.SQLState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BeeswaxException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BeeswaxException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("log_context", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->log_context);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("handle", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->handle.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.errorCode) {
    xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->errorCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SQLState) {
    xfer += oprot->writeFieldBegin("SQLState", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->SQLState);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BeeswaxException &a, BeeswaxException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.log_context, b.log_context);
  swap(a.handle, b.handle);
  swap(a.errorCode, b.errorCode);
  swap(a.SQLState, b.SQLState);
  swap(a.__isset, b.__isset);
}

BeeswaxException::BeeswaxException(const BeeswaxException& other28) : TException() {
  message = other28.message;
  log_context = other28.log_context;
  handle = other28.handle;
  errorCode = other28.errorCode;
  SQLState = other28.SQLState;
  __isset = other28.__isset;
}
BeeswaxException& BeeswaxException::operator=(const BeeswaxException& other29) {
  message = other29.message;
  log_context = other29.log_context;
  handle = other29.handle;
  errorCode = other29.errorCode;
  SQLState = other29.SQLState;
  __isset = other29.__isset;
  return *this;
}
void BeeswaxException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BeeswaxException(";
  out << "message=" << to_string(message);
  out << ", " << "log_context=" << to_string(log_context);
  out << ", " << "handle=" << to_string(handle);
  out << ", " << "errorCode="; (__isset.errorCode ? (out << to_string(errorCode)) : (out << "<null>"));
  out << ", " << "SQLState="; (__isset.SQLState ? (out << to_string(SQLState)) : (out << "<null>"));
  out << ")";
}

const char* BeeswaxException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: BeeswaxException";
  }
}


QueryNotFoundException::~QueryNotFoundException() throw() {
}


uint32_t QueryNotFoundException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryNotFoundException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryNotFoundException");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryNotFoundException &a, QueryNotFoundException &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

QueryNotFoundException::QueryNotFoundException(const QueryNotFoundException& other30) : TException() {
  (void) other30;
}
QueryNotFoundException& QueryNotFoundException::operator=(const QueryNotFoundException& other31) {
  (void) other31;
  return *this;
}
void QueryNotFoundException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryNotFoundException(";
  out << ")";
}

const char* QueryNotFoundException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: QueryNotFoundException";
  }
}


ConfigVariable::~ConfigVariable() throw() {
}


void ConfigVariable::__set_key(const std::string& val) {
  this->key = val;
}

void ConfigVariable::__set_value(const std::string& val) {
  this->value = val;
}

void ConfigVariable::__set_description(const std::string& val) {
  this->description = val;
}

uint32_t ConfigVariable::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConfigVariable::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConfigVariable");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConfigVariable &a, ConfigVariable &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

ConfigVariable::ConfigVariable(const ConfigVariable& other32) {
  key = other32.key;
  value = other32.value;
  description = other32.description;
  __isset = other32.__isset;
}
ConfigVariable& ConfigVariable::operator=(const ConfigVariable& other33) {
  key = other33.key;
  value = other33.value;
  description = other33.description;
  __isset = other33.__isset;
  return *this;
}
void ConfigVariable::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConfigVariable(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ", " << "description=" << to_string(description);
  out << ")";
}

} // namespace
