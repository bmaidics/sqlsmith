/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ImpalaService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kTImpalaQueryOptionsValues[] = {
  TImpalaQueryOptions::ABORT_ON_ERROR,
  TImpalaQueryOptions::MAX_ERRORS,
  TImpalaQueryOptions::DISABLE_CODEGEN,
  TImpalaQueryOptions::BATCH_SIZE,
  TImpalaQueryOptions::MEM_LIMIT,
  TImpalaQueryOptions::NUM_NODES,
  TImpalaQueryOptions::MAX_SCAN_RANGE_LENGTH,
  TImpalaQueryOptions::MAX_IO_BUFFERS,
  TImpalaQueryOptions::NUM_SCANNER_THREADS,
  TImpalaQueryOptions::ALLOW_UNSUPPORTED_FORMATS,
  TImpalaQueryOptions::DEFAULT_ORDER_BY_LIMIT,
  TImpalaQueryOptions::DEBUG_ACTION,
  TImpalaQueryOptions::ABORT_ON_DEFAULT_LIMIT_EXCEEDED,
  TImpalaQueryOptions::COMPRESSION_CODEC,
  TImpalaQueryOptions::SEQ_COMPRESSION_MODE,
  TImpalaQueryOptions::HBASE_CACHING,
  TImpalaQueryOptions::HBASE_CACHE_BLOCKS,
  TImpalaQueryOptions::PARQUET_FILE_SIZE,
  TImpalaQueryOptions::EXPLAIN_LEVEL,
  TImpalaQueryOptions::SYNC_DDL,
  TImpalaQueryOptions::REQUEST_POOL,
  TImpalaQueryOptions::V_CPU_CORES,
  TImpalaQueryOptions::RESERVATION_REQUEST_TIMEOUT,
  TImpalaQueryOptions::DISABLE_CACHED_READS,
  TImpalaQueryOptions::DISABLE_OUTERMOST_TOPN,
  TImpalaQueryOptions::RM_INITIAL_MEM,
  TImpalaQueryOptions::QUERY_TIMEOUT_S,
  TImpalaQueryOptions::MAX_BLOCK_MGR_MEMORY,
  TImpalaQueryOptions::APPX_COUNT_DISTINCT,
  TImpalaQueryOptions::DISABLE_UNSAFE_SPILLS,
  TImpalaQueryOptions::EXEC_SINGLE_NODE_ROWS_THRESHOLD,
  TImpalaQueryOptions::OPTIMIZE_PARTITION_KEY_SCANS,
  TImpalaQueryOptions::REPLICA_PREFERENCE,
  TImpalaQueryOptions::RANDOM_REPLICA,
  TImpalaQueryOptions::SCAN_NODE_CODEGEN_THRESHOLD,
  TImpalaQueryOptions::DISABLE_STREAMING_PREAGGREGATIONS,
  TImpalaQueryOptions::RUNTIME_FILTER_MODE,
  TImpalaQueryOptions::RUNTIME_BLOOM_FILTER_SIZE,
  TImpalaQueryOptions::RUNTIME_FILTER_WAIT_TIME_MS,
  TImpalaQueryOptions::DISABLE_ROW_RUNTIME_FILTERING,
  TImpalaQueryOptions::MAX_NUM_RUNTIME_FILTERS
};
const char* _kTImpalaQueryOptionsNames[] = {
  "ABORT_ON_ERROR",
  "MAX_ERRORS",
  "DISABLE_CODEGEN",
  "BATCH_SIZE",
  "MEM_LIMIT",
  "NUM_NODES",
  "MAX_SCAN_RANGE_LENGTH",
  "MAX_IO_BUFFERS",
  "NUM_SCANNER_THREADS",
  "ALLOW_UNSUPPORTED_FORMATS",
  "DEFAULT_ORDER_BY_LIMIT",
  "DEBUG_ACTION",
  "ABORT_ON_DEFAULT_LIMIT_EXCEEDED",
  "COMPRESSION_CODEC",
  "SEQ_COMPRESSION_MODE",
  "HBASE_CACHING",
  "HBASE_CACHE_BLOCKS",
  "PARQUET_FILE_SIZE",
  "EXPLAIN_LEVEL",
  "SYNC_DDL",
  "REQUEST_POOL",
  "V_CPU_CORES",
  "RESERVATION_REQUEST_TIMEOUT",
  "DISABLE_CACHED_READS",
  "DISABLE_OUTERMOST_TOPN",
  "RM_INITIAL_MEM",
  "QUERY_TIMEOUT_S",
  "MAX_BLOCK_MGR_MEMORY",
  "APPX_COUNT_DISTINCT",
  "DISABLE_UNSAFE_SPILLS",
  "EXEC_SINGLE_NODE_ROWS_THRESHOLD",
  "OPTIMIZE_PARTITION_KEY_SCANS",
  "REPLICA_PREFERENCE",
  "RANDOM_REPLICA",
  "SCAN_NODE_CODEGEN_THRESHOLD",
  "DISABLE_STREAMING_PREAGGREGATIONS",
  "RUNTIME_FILTER_MODE",
  "RUNTIME_BLOOM_FILTER_SIZE",
  "RUNTIME_FILTER_WAIT_TIME_MS",
  "DISABLE_ROW_RUNTIME_FILTERING",
  "MAX_NUM_RUNTIME_FILTERS"
};
const std::map<int, const char*> _TImpalaQueryOptions_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(41, _kTImpalaQueryOptionsValues, _kTImpalaQueryOptionsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


TInsertResult::~TInsertResult() throw() {
}


void TInsertResult::__set_rows_appended(const std::map<std::string, int64_t> & val) {
  this->rows_appended = val;
}

uint32_t TInsertResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rows_appended = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->rows_appended.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              int64_t& _val6 = this->rows_appended[_key5];
              xfer += iprot->readI64(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          isset_rows_appended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rows_appended)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TInsertResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TInsertResult");

  xfer += oprot->writeFieldBegin("rows_appended", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->rows_appended.size()));
    std::map<std::string, int64_t> ::const_iterator _iter7;
    for (_iter7 = this->rows_appended.begin(); _iter7 != this->rows_appended.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeI64(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TInsertResult &a, TInsertResult &b) {
  using ::std::swap;
  swap(a.rows_appended, b.rows_appended);
}

TInsertResult::TInsertResult(const TInsertResult& other8) {
  rows_appended = other8.rows_appended;
}
TInsertResult& TInsertResult::operator=(const TInsertResult& other9) {
  rows_appended = other9.rows_appended;
  return *this;
}
void TInsertResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TInsertResult(";
  out << "rows_appended=" << to_string(rows_appended);
  out << ")";
}


TPingImpalaServiceResp::~TPingImpalaServiceResp() throw() {
}


void TPingImpalaServiceResp::__set_version(const std::string& val) {
  this->version = val;
}

uint32_t TPingImpalaServiceResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPingImpalaServiceResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPingImpalaServiceResp");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPingImpalaServiceResp &a, TPingImpalaServiceResp &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

TPingImpalaServiceResp::TPingImpalaServiceResp(const TPingImpalaServiceResp& other10) {
  version = other10.version;
  __isset = other10.__isset;
}
TPingImpalaServiceResp& TPingImpalaServiceResp::operator=(const TPingImpalaServiceResp& other11) {
  version = other11.version;
  __isset = other11.__isset;
  return *this;
}
void TPingImpalaServiceResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPingImpalaServiceResp(";
  out << "version=" << to_string(version);
  out << ")";
}


TResetTableReq::~TResetTableReq() throw() {
}


void TResetTableReq::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void TResetTableReq::__set_table_name(const std::string& val) {
  this->table_name = val;
}

uint32_t TResetTableReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_db_name = false;
  bool isset_table_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          isset_table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_table_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TResetTableReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TResetTableReq");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResetTableReq &a, TResetTableReq &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
}

TResetTableReq::TResetTableReq(const TResetTableReq& other12) {
  db_name = other12.db_name;
  table_name = other12.table_name;
}
TResetTableReq& TResetTableReq::operator=(const TResetTableReq& other13) {
  db_name = other13.db_name;
  table_name = other13.table_name;
  return *this;
}
void TResetTableReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TResetTableReq(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ")";
}


TGetExecSummaryReq::~TGetExecSummaryReq() throw() {
}


void TGetExecSummaryReq::__set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}

void TGetExecSummaryReq::__set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val) {
  this->sessionHandle = val;
__isset.sessionHandle = true;
}

uint32_t TGetExecSummaryReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->operationHandle.read(iprot);
          this->__isset.operationHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sessionHandle.read(iprot);
          this->__isset.sessionHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TGetExecSummaryReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TGetExecSummaryReq");

  if (this->__isset.operationHandle) {
    xfer += oprot->writeFieldBegin("operationHandle", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->operationHandle.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sessionHandle) {
    xfer += oprot->writeFieldBegin("sessionHandle", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->sessionHandle.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TGetExecSummaryReq &a, TGetExecSummaryReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.__isset, b.__isset);
}

TGetExecSummaryReq::TGetExecSummaryReq(const TGetExecSummaryReq& other14) {
  operationHandle = other14.operationHandle;
  sessionHandle = other14.sessionHandle;
  __isset = other14.__isset;
}
TGetExecSummaryReq& TGetExecSummaryReq::operator=(const TGetExecSummaryReq& other15) {
  operationHandle = other15.operationHandle;
  sessionHandle = other15.sessionHandle;
  __isset = other15.__isset;
  return *this;
}
void TGetExecSummaryReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetExecSummaryReq(";
  out << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ", " << "sessionHandle="; (__isset.sessionHandle ? (out << to_string(sessionHandle)) : (out << "<null>"));
  out << ")";
}


TGetExecSummaryResp::~TGetExecSummaryResp() throw() {
}


void TGetExecSummaryResp::__set_status(const  ::apache::hive::service::cli::thrift::TStatus& val) {
  this->status = val;
}

void TGetExecSummaryResp::__set_summary(const  ::impala::TExecSummary& val) {
  this->summary = val;
__isset.summary = true;
}

uint32_t TGetExecSummaryResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->summary.read(iprot);
          this->__isset.summary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TGetExecSummaryResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TGetExecSummaryResp");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.summary) {
    xfer += oprot->writeFieldBegin("summary", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->summary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TGetExecSummaryResp &a, TGetExecSummaryResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.summary, b.summary);
  swap(a.__isset, b.__isset);
}

TGetExecSummaryResp::TGetExecSummaryResp(const TGetExecSummaryResp& other16) {
  status = other16.status;
  summary = other16.summary;
  __isset = other16.__isset;
}
TGetExecSummaryResp& TGetExecSummaryResp::operator=(const TGetExecSummaryResp& other17) {
  status = other17.status;
  summary = other17.summary;
  __isset = other17.__isset;
  return *this;
}
void TGetExecSummaryResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetExecSummaryResp(";
  out << "status=" << to_string(status);
  out << ", " << "summary="; (__isset.summary ? (out << to_string(summary)) : (out << "<null>"));
  out << ")";
}


TGetRuntimeProfileReq::~TGetRuntimeProfileReq() throw() {
}


void TGetRuntimeProfileReq::__set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}

void TGetRuntimeProfileReq::__set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val) {
  this->sessionHandle = val;
__isset.sessionHandle = true;
}

uint32_t TGetRuntimeProfileReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->operationHandle.read(iprot);
          this->__isset.operationHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sessionHandle.read(iprot);
          this->__isset.sessionHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TGetRuntimeProfileReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TGetRuntimeProfileReq");

  if (this->__isset.operationHandle) {
    xfer += oprot->writeFieldBegin("operationHandle", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->operationHandle.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sessionHandle) {
    xfer += oprot->writeFieldBegin("sessionHandle", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->sessionHandle.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TGetRuntimeProfileReq &a, TGetRuntimeProfileReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.__isset, b.__isset);
}

TGetRuntimeProfileReq::TGetRuntimeProfileReq(const TGetRuntimeProfileReq& other18) {
  operationHandle = other18.operationHandle;
  sessionHandle = other18.sessionHandle;
  __isset = other18.__isset;
}
TGetRuntimeProfileReq& TGetRuntimeProfileReq::operator=(const TGetRuntimeProfileReq& other19) {
  operationHandle = other19.operationHandle;
  sessionHandle = other19.sessionHandle;
  __isset = other19.__isset;
  return *this;
}
void TGetRuntimeProfileReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetRuntimeProfileReq(";
  out << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ", " << "sessionHandle="; (__isset.sessionHandle ? (out << to_string(sessionHandle)) : (out << "<null>"));
  out << ")";
}


TGetRuntimeProfileResp::~TGetRuntimeProfileResp() throw() {
}


void TGetRuntimeProfileResp::__set_status(const  ::apache::hive::service::cli::thrift::TStatus& val) {
  this->status = val;
}

void TGetRuntimeProfileResp::__set_profile(const std::string& val) {
  this->profile = val;
__isset.profile = true;
}

uint32_t TGetRuntimeProfileResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profile);
          this->__isset.profile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TGetRuntimeProfileResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TGetRuntimeProfileResp");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.profile) {
    xfer += oprot->writeFieldBegin("profile", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->profile);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TGetRuntimeProfileResp &a, TGetRuntimeProfileResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.profile, b.profile);
  swap(a.__isset, b.__isset);
}

TGetRuntimeProfileResp::TGetRuntimeProfileResp(const TGetRuntimeProfileResp& other20) {
  status = other20.status;
  profile = other20.profile;
  __isset = other20.__isset;
}
TGetRuntimeProfileResp& TGetRuntimeProfileResp::operator=(const TGetRuntimeProfileResp& other21) {
  status = other21.status;
  profile = other21.profile;
  __isset = other21.__isset;
  return *this;
}
void TGetRuntimeProfileResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetRuntimeProfileResp(";
  out << "status=" << to_string(status);
  out << ", " << "profile="; (__isset.profile ? (out << to_string(profile)) : (out << "<null>"));
  out << ")";
}

} // namespace
