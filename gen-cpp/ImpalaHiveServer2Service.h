/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImpalaHiveServer2Service_H
#define ImpalaHiveServer2Service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ImpalaService_types.h"
#include "TCLIService.h"

namespace impala {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ImpalaHiveServer2ServiceIf : virtual public  ::apache::hive::service::cli::thrift::TCLIServiceIf {
 public:
  virtual ~ImpalaHiveServer2ServiceIf() {}
  virtual void GetExecSummary(TGetExecSummaryResp& _return, const TGetExecSummaryReq& req) = 0;
  virtual void GetRuntimeProfile(TGetRuntimeProfileResp& _return, const TGetRuntimeProfileReq& req) = 0;
};

class ImpalaHiveServer2ServiceIfFactory : virtual public  ::apache::hive::service::cli::thrift::TCLIServiceIfFactory {
 public:
  typedef ImpalaHiveServer2ServiceIf Handler;

  virtual ~ImpalaHiveServer2ServiceIfFactory() {}

  virtual ImpalaHiveServer2ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::apache::hive::service::cli::thrift::TCLIServiceIf* /* handler */) = 0;
};

class ImpalaHiveServer2ServiceIfSingletonFactory : virtual public ImpalaHiveServer2ServiceIfFactory {
 public:
  ImpalaHiveServer2ServiceIfSingletonFactory(const boost::shared_ptr<ImpalaHiveServer2ServiceIf>& iface) : iface_(iface) {}
  virtual ~ImpalaHiveServer2ServiceIfSingletonFactory() {}

  virtual ImpalaHiveServer2ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::apache::hive::service::cli::thrift::TCLIServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ImpalaHiveServer2ServiceIf> iface_;
};

class ImpalaHiveServer2ServiceNull : virtual public ImpalaHiveServer2ServiceIf , virtual public  ::apache::hive::service::cli::thrift::TCLIServiceNull {
 public:
  virtual ~ImpalaHiveServer2ServiceNull() {}
  void GetExecSummary(TGetExecSummaryResp& /* _return */, const TGetExecSummaryReq& /* req */) {
    return;
  }
  void GetRuntimeProfile(TGetRuntimeProfileResp& /* _return */, const TGetRuntimeProfileReq& /* req */) {
    return;
  }
};

typedef struct _ImpalaHiveServer2Service_GetExecSummary_args__isset {
  _ImpalaHiveServer2Service_GetExecSummary_args__isset() : req(false) {}
  bool req :1;
} _ImpalaHiveServer2Service_GetExecSummary_args__isset;

class ImpalaHiveServer2Service_GetExecSummary_args {
 public:

  ImpalaHiveServer2Service_GetExecSummary_args(const ImpalaHiveServer2Service_GetExecSummary_args&);
  ImpalaHiveServer2Service_GetExecSummary_args& operator=(const ImpalaHiveServer2Service_GetExecSummary_args&);
  ImpalaHiveServer2Service_GetExecSummary_args() {
  }

  virtual ~ImpalaHiveServer2Service_GetExecSummary_args() throw();
  TGetExecSummaryReq req;

  _ImpalaHiveServer2Service_GetExecSummary_args__isset __isset;

  void __set_req(const TGetExecSummaryReq& val);

  bool operator == (const ImpalaHiveServer2Service_GetExecSummary_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ImpalaHiveServer2Service_GetExecSummary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaHiveServer2Service_GetExecSummary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaHiveServer2Service_GetExecSummary_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_GetExecSummary_pargs() throw();
  const TGetExecSummaryReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetExecSummary_result__isset {
  _ImpalaHiveServer2Service_GetExecSummary_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetExecSummary_result__isset;

class ImpalaHiveServer2Service_GetExecSummary_result {
 public:

  ImpalaHiveServer2Service_GetExecSummary_result(const ImpalaHiveServer2Service_GetExecSummary_result&);
  ImpalaHiveServer2Service_GetExecSummary_result& operator=(const ImpalaHiveServer2Service_GetExecSummary_result&);
  ImpalaHiveServer2Service_GetExecSummary_result() {
  }

  virtual ~ImpalaHiveServer2Service_GetExecSummary_result() throw();
  TGetExecSummaryResp success;

  _ImpalaHiveServer2Service_GetExecSummary_result__isset __isset;

  void __set_success(const TGetExecSummaryResp& val);

  bool operator == (const ImpalaHiveServer2Service_GetExecSummary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImpalaHiveServer2Service_GetExecSummary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaHiveServer2Service_GetExecSummary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetExecSummary_presult__isset {
  _ImpalaHiveServer2Service_GetExecSummary_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetExecSummary_presult__isset;

class ImpalaHiveServer2Service_GetExecSummary_presult {
 public:


  virtual ~ImpalaHiveServer2Service_GetExecSummary_presult() throw();
  TGetExecSummaryResp* success;

  _ImpalaHiveServer2Service_GetExecSummary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImpalaHiveServer2Service_GetRuntimeProfile_args__isset {
  _ImpalaHiveServer2Service_GetRuntimeProfile_args__isset() : req(false) {}
  bool req :1;
} _ImpalaHiveServer2Service_GetRuntimeProfile_args__isset;

class ImpalaHiveServer2Service_GetRuntimeProfile_args {
 public:

  ImpalaHiveServer2Service_GetRuntimeProfile_args(const ImpalaHiveServer2Service_GetRuntimeProfile_args&);
  ImpalaHiveServer2Service_GetRuntimeProfile_args& operator=(const ImpalaHiveServer2Service_GetRuntimeProfile_args&);
  ImpalaHiveServer2Service_GetRuntimeProfile_args() {
  }

  virtual ~ImpalaHiveServer2Service_GetRuntimeProfile_args() throw();
  TGetRuntimeProfileReq req;

  _ImpalaHiveServer2Service_GetRuntimeProfile_args__isset __isset;

  void __set_req(const TGetRuntimeProfileReq& val);

  bool operator == (const ImpalaHiveServer2Service_GetRuntimeProfile_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ImpalaHiveServer2Service_GetRuntimeProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaHiveServer2Service_GetRuntimeProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaHiveServer2Service_GetRuntimeProfile_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_GetRuntimeProfile_pargs() throw();
  const TGetRuntimeProfileReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetRuntimeProfile_result__isset {
  _ImpalaHiveServer2Service_GetRuntimeProfile_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetRuntimeProfile_result__isset;

class ImpalaHiveServer2Service_GetRuntimeProfile_result {
 public:

  ImpalaHiveServer2Service_GetRuntimeProfile_result(const ImpalaHiveServer2Service_GetRuntimeProfile_result&);
  ImpalaHiveServer2Service_GetRuntimeProfile_result& operator=(const ImpalaHiveServer2Service_GetRuntimeProfile_result&);
  ImpalaHiveServer2Service_GetRuntimeProfile_result() {
  }

  virtual ~ImpalaHiveServer2Service_GetRuntimeProfile_result() throw();
  TGetRuntimeProfileResp success;

  _ImpalaHiveServer2Service_GetRuntimeProfile_result__isset __isset;

  void __set_success(const TGetRuntimeProfileResp& val);

  bool operator == (const ImpalaHiveServer2Service_GetRuntimeProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImpalaHiveServer2Service_GetRuntimeProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaHiveServer2Service_GetRuntimeProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetRuntimeProfile_presult__isset {
  _ImpalaHiveServer2Service_GetRuntimeProfile_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetRuntimeProfile_presult__isset;

class ImpalaHiveServer2Service_GetRuntimeProfile_presult {
 public:


  virtual ~ImpalaHiveServer2Service_GetRuntimeProfile_presult() throw();
  TGetRuntimeProfileResp* success;

  _ImpalaHiveServer2Service_GetRuntimeProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ImpalaHiveServer2ServiceClient : virtual public ImpalaHiveServer2ServiceIf, public  ::apache::hive::service::cli::thrift::TCLIServiceClient {
 public:
  ImpalaHiveServer2ServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::apache::hive::service::cli::thrift::TCLIServiceClient(prot, prot) {}
  ImpalaHiveServer2ServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::apache::hive::service::cli::thrift::TCLIServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetExecSummary(TGetExecSummaryResp& _return, const TGetExecSummaryReq& req);
  void send_GetExecSummary(const TGetExecSummaryReq& req);
  void recv_GetExecSummary(TGetExecSummaryResp& _return);
  void GetRuntimeProfile(TGetRuntimeProfileResp& _return, const TGetRuntimeProfileReq& req);
  void send_GetRuntimeProfile(const TGetRuntimeProfileReq& req);
  void recv_GetRuntimeProfile(TGetRuntimeProfileResp& _return);
};

class ImpalaHiveServer2ServiceProcessor : public  ::apache::hive::service::cli::thrift::TCLIServiceProcessor {
 protected:
  boost::shared_ptr<ImpalaHiveServer2ServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ImpalaHiveServer2ServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetExecSummary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRuntimeProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ImpalaHiveServer2ServiceProcessor(boost::shared_ptr<ImpalaHiveServer2ServiceIf> iface) :
     ::apache::hive::service::cli::thrift::TCLIServiceProcessor(iface),
    iface_(iface) {
    processMap_["GetExecSummary"] = &ImpalaHiveServer2ServiceProcessor::process_GetExecSummary;
    processMap_["GetRuntimeProfile"] = &ImpalaHiveServer2ServiceProcessor::process_GetRuntimeProfile;
  }

  virtual ~ImpalaHiveServer2ServiceProcessor() {}
};

class ImpalaHiveServer2ServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ImpalaHiveServer2ServiceProcessorFactory(const ::boost::shared_ptr< ImpalaHiveServer2ServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ImpalaHiveServer2ServiceIfFactory > handlerFactory_;
};

class ImpalaHiveServer2ServiceMultiface : virtual public ImpalaHiveServer2ServiceIf, public  ::apache::hive::service::cli::thrift::TCLIServiceMultiface {
 public:
  ImpalaHiveServer2ServiceMultiface(std::vector<boost::shared_ptr<ImpalaHiveServer2ServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ImpalaHiveServer2ServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::apache::hive::service::cli::thrift::TCLIServiceMultiface::add(*iter);
    }
  }
  virtual ~ImpalaHiveServer2ServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ImpalaHiveServer2ServiceIf> > ifaces_;
  ImpalaHiveServer2ServiceMultiface() {}
  void add(boost::shared_ptr<ImpalaHiveServer2ServiceIf> iface) {
     ::apache::hive::service::cli::thrift::TCLIServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void GetExecSummary(TGetExecSummaryResp& _return, const TGetExecSummaryReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetExecSummary(_return, req);
    }
    ifaces_[i]->GetExecSummary(_return, req);
    return;
  }

  void GetRuntimeProfile(TGetRuntimeProfileResp& _return, const TGetRuntimeProfileReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRuntimeProfile(_return, req);
    }
    ifaces_[i]->GetRuntimeProfile(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ImpalaHiveServer2ServiceConcurrentClient : virtual public ImpalaHiveServer2ServiceIf, public  ::apache::hive::service::cli::thrift::TCLIServiceConcurrentClient {
 public:
  ImpalaHiveServer2ServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::apache::hive::service::cli::thrift::TCLIServiceConcurrentClient(prot, prot) {}
  ImpalaHiveServer2ServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::apache::hive::service::cli::thrift::TCLIServiceConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetExecSummary(TGetExecSummaryResp& _return, const TGetExecSummaryReq& req);
  int32_t send_GetExecSummary(const TGetExecSummaryReq& req);
  void recv_GetExecSummary(TGetExecSummaryResp& _return, const int32_t seqid);
  void GetRuntimeProfile(TGetRuntimeProfileResp& _return, const TGetRuntimeProfileReq& req);
  int32_t send_GetRuntimeProfile(const TGetRuntimeProfileReq& req);
  void recv_GetRuntimeProfile(TGetRuntimeProfileResp& _return, const int32_t seqid);
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
